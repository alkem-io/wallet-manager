rabbitmq:
  # Connection in the form of 'amqp://[user]:[password]@[host]:[port]?heartbeat=30'
  connection:
    # RabbitMQ host
    host: ${RABBITMQ_HOST}:localhost

    # RabbitMQ AMQP port. Used by AMQP 0-9-1 and 1.0 clients without and with TLS
    port: ${RABBITMQ_PORT}:5672

    # RabbitMQ user
    user: ${RABBITMQ_USER}:user

    # RabbitMQ password
    password: ${RABBITMQ_PASSWORD}:bitnami

## MONITORING ##
# This section defines settings used for DevOps - MONITORING providers, endpoints, logging configuration.
monitoring:
  # logging & profiling section.
  logging:
    # A flag setting whether Winston Console transport will be enabled.
    # If the flag is set to true logs of the appropriate level (see below) will be outputted to the console
    # after the application has been bootstrapped.
    # The NestJS bootstrap process is handled by the internal NestJS logging.
    console_logging_enabled: ${LOGGING_CONSOLE_ENABLED}:true

    # Logging level for outputs to console.
    # Valid values are log|error|warn|debug|verbose.
    level: ${LOGGING_LEVEL_CONSOLE}:verbose

  # Elastic logging configuration
  elastic:
    # A flag setting whether Winston Elastic transport will be enabled.
    # If the flag is set to true logs of the appropriate level (see below) will be outputted to Elastic
    # given a correct Elastic Cloud endpoints are provided.
    enabled: ${LOGGING_ELK_ENABLED}:false

    # Logging level for outputs to elastic.
    # Valid values are log|error|warn|debug|verbose.
    logging_level: ${LOGGING_LEVEL_ELK}:Error

    # Elastic Cloud configuration
    cloud:
      # Elastic Cloud ID. Typically it will look like (e.g., this is not a valid value):
      # elastic-observability-deployment-dev:d2VzdGV1cm9wZS5henVyZS5lbGFzdGljLWNsb3VkLVfBcTo5MjQzJGMyZjJiYTM4ZmM0ZTQyZjY5N2Q5MDU2YjIxYzkyNzY3JDRjMDAxNjYzZTQzMDQzNThhNTkwMzY2MWI2ZDU5MTVl
      id: ${ELASTIC_CLOUD_ID}

      # Elastic Cloud username. Defaults to 'elastic'.
      username: ${ELASTIC_CLOUD_USERNAME}

      # Elastic Cloud password.
      password: ${ELASTIC_CLOUD_PASSWORD}

identity:
  ssi:
    # Jolocom SDK is used for providing SSI capabilities on the platform.
    # Note: NOT FOR PRODUCTION USAGE, experimental functionality,
    # In particular, the migrations of the Jolocom database are still not setup, so any DID's created are not
    # guaranteed to be migrated properly.
    enabled: ${SSI_ENABLED}:true

    jolocom:
      # MySQL database configuration for usage by the Jolocom SDK.
      # The authentication method used is MySQL Native Password.
      # Note: both schema / database name are used for configuration and they need to have the same value.
      database:
        # Database host.
        host: ${DATABASE_HOST}:localhost

        # MySQL daemon port.
        port: 3306

        # MySQL username.
        username: 'root'

        # MySQL password.
        password: ${MYSQL_ROOT_PASSWORD}:toor

        # MySQL schema / database name.
        schema: ${JOLOCOM_MYSQL_DATABASE}:jolocom

        # MySQL schema / database name.
        database: ${JOLOCOM_MYSQL_DATABASE}:jolocom

        # Flag setting whether MySQL operations should be logged to the console.
        logging: ${JOLOCOM_ENABLE_ORM_LOGGING}:false
## hosting ##
# The hosting configuration for the Alkemio Server
hosting:
  # The type of environment is used in multiple places to determine whether dev tooling is enabled.
  # The tyoe of environment can also be used for monitoring / logging / analysis in an ELK cluster / ElasticCloud instance.
  # For production deployments it should be set to Prod.
  #
  # Options: Dev, Prod
  environment: ${ENVIRONMENT}:Dev

credentials:
  proof_of_name:
    name: ${PROOF_OF_NAME_CREDENTIAL_NAME}:Name
    schema: ${PROOF_OF_NAME_CREDENTIAL_SCHEMA}:https://schema.org/EducationalOccupationalCredential
    types:
      - Credential
      - ProofOfNameCredential
    uniqueType: ProofOfNameCredential
    context:
      givenName: 'schema:givenName'
      familyName: 'schema:familyName'
  proof_of_postal_address:
    name: ${PROOF_OF_POSTAL_ADDRESS_CREDENTIAL_NAME}:Postal Address
    schema: ${PROOF_OF_POSTAL_ADDRESS_CREDENTIAL_SCHEMA}:https://schema.org/EducationalOccupationalCredential
    types:
      - Credential
      - postalAddress
    uniqueType: postalAddress
    context:
      addressLine1: 'schema:streetAddress'
      addressLine2: 'schema:streetAddress'
      postalCode: 'schema:postalCode'
      city: 'schema:addressLocality'
      country: 'schema:addressLocality'
  proof_of_challenge_contributor:
    name: Challenge Contributor
    schema: https://schema.org/EducationalOccupationalCredential
    types:
      - Credential
      - ChallengeContributorCredential
    uniqueType: ChallengeContributorCredential
    context:
      challengeId: 'schema:uuid'
      userId: 'schema:uuid'

